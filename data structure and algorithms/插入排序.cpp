#include <stdio.h>

// 分类 ------------- 内部比较排序
// 数据结构 ---------- 数组
// 最差时间复杂度 ---- 最坏情况为输入序列是降序排列的,此时时间复杂度O(n^2)
// 最优时间复杂度 ---- 最好情况为输入序列是升序排列的,此时时间复杂度O(n)
// 平均时间复杂度 ---- O(n^2)
// 所需辅助空间 ------ O(1)
// 稳定性 ------------ 稳定

//插入排序是一个从无序序列逐渐达到有序序列的过程，而且每一次大循环有序序列长度都增加一 
 
void InsertionSort(int A[], int n)
{
    for (int i = 1; i < n; i++)
    {
    	//获取第i个要排序的元素 
        int get = A[i];                 
        //有j个元素已经排好序 
        int j = i - 1;                  
        //将当前的元素插入到有序的前j个元素数组中 
        while (j >= 0 && A[j] > get) //从大到小遍历，寻找第一个小于待插元素的位置   
        {//找到了当前元素应该所在的位置，A[j] > get，表示当前序列是递增排序的，应为要找到第一个小于
		//排序元素的位置就停止循环，该循环是将所有大于get的元素后移一位 
            A[j + 1] = A[j];
			//比较元素位置前移一位，继续查找 
			j--;
        }
        //此时 A[j] <= get ,将get插入到 j+1个位置
        A[j + 1] = get;//因为j--了，所以用j + 1 
    }
}

int main()
{
    int A[] = { 6, 5, 3, 1, 8, 7, 2, 4 };// 从小到大插入排序
    int n = sizeof(A) / sizeof(int);
    InsertionSort(A, n);
    printf("插入排序结果：");
    for (int i = 0; i < n; i++)
    {
        printf("%d ", A[i]);
    }
    printf("\n");
    return 0;
}
